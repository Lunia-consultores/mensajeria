<?php

namespace Tests\Mensajeria\Infrastructure\PhpAmqpLib\Domain\Service\Mensajes;

use Mensajeria\Domain\Model\Conexion\Conexion;
use Mensajeria\Domain\Model\Mensajes\Mensaje;
use Mensajeria\Domain\Model\Mensajes\Payload;
use Mensajeria\Infrastructure\PhpAmqpLib\Domain\Service\Mensajes\NotificarMensajesPhpAmqpLib;
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Exception\AMQPIOException;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ResponseInterface;
use ReflectionClass;
use ReflectionException;
use Tests\TestRabbitmq;

class NotificarMensajesPhpAmqpLibTest extends TestCase
{
    use TestRabbitmq;

    public function parseaMensajes(ResponseInterface $response)
    {

        $mensajes = json_decode($response->getBody(), true);

        return array_map(function ($mensaje) {
            return json_decode($mensaje['payload'], true);
        }, $mensajes);

    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->initQueue();
    }


    public function testShouldCallConexionWithParametersSpecified()
    {

        $conexion = new Conexion('127.0.0.1', 5672, 'guest', 'guest', '/', 'exchange');

        $notificar = new NotificarMensajesPhpAmqpLib($conexion);

        $this->callMethod(
            $notificar,
            'iniciaConexion',
            []
        );

        $this->assertEquals(AMQPStreamConnection::class, get_class($notificar->rabbitmqConexion()));

    }

    public function testExpectExceptionOnIncorrect()
    {

        $this->expectException(AMQPIOException::class);

        $conexion = new Conexion('127.0..1', 5672, 'guest', 'guest', '/', 'exchange');

        $notificar = new NotificarMensajesPhpAmqpLib($conexion);

        $this->callMethod(
            $notificar,
            'iniciaConexion',
            []
        );
    }

    public function testDebeMandarMensajesPasadosPorParametros()
    {
        $conexion = new Conexion('127.0.0.1', 5672, 'guest', 'guest', '/', '');

        $notificar = new NotificarMensajesPhpAmqpLib($conexion);

        $notificar->execute(
            [
                new Mensaje('tipo:mensaje-uno',
                    new Payload(
                        'mensaje-prueba',
                        [
                            'id' => 27
                        ]
                    )
                ),
                new Mensaje('tipo:mensaje-uno',
                    new Payload(
                        'mensaje-prueba',
                        [
                            'id' => 27
                        ]
                    )
                )
            ]
        );

        $mensajes = $this->obtenerMensajes('tipo:mensaje-uno', 2);

        $this->assertCount(2, $mensajes);

    }


    public function testDebeMandarMensajeConElContenidoCorrect()
    {
        $conexion = new Conexion('127.0.0.1', 5672, 'guest', 'guest', '/', '');

        $notificar = new NotificarMensajesPhpAmqpLib($conexion);

        $notificar->execute(
            [
                new Mensaje('tipo:mensaje-uno',
                    new Payload(
                        'mensaje-prueba',
                        [
                            'id' => 27
                        ]
                    )
                )
            ]
        );

        $mensajes = $this->obtenerMensajes('tipo:mensaje-uno', 2);

        $this->assertEquals('mensaje-prueba', $mensajes[0]['tipo']);
        $this->assertEquals(['id' => 27], $mensajes[0]['data']);
    }


    /**
     * @throws ReflectionException
     */
    private function callMethod($obj, $name, array $args)
    {
        $class = new ReflectionClass($obj);
        $method = $class->getMethod($name);
        $method->setAccessible(true);
        return $method->invokeArgs($obj, $args);
    }

}
